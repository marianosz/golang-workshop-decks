Go Workshop - Dia 3
https://golang-workshop.io
Tags: golang

Rodolfo Finochietti
[[https://rodolfofinochietti.me]]
@rodolfof

Mariano SÃ¡nchez
@marianosz

* Archivos

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/16-files][Ejercicio 16]]

.code -numbers ./resources/src/files.go

* Concurrencia - Go-Routines

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/17-concurrency][Ejercicio 17]]

- Golang provee un mecanismo sencillo para crear un nuevo _"thread"_ [[https://medium.com/rungo/achieving-concurrency-in-go-3f84cbf870ca][*]].
- Se usa el keyword *go* antes de una llamada a una funcion (Go-Routines).

.image ./resources/images/concurrency.png 300 _

* Concurrencia - Channels

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/17-concurrency][Ejercicio 17]]

- Los Channels son _pipes_ para conectar _goroutines_ concurrentes.
- Sirven para enviar y recibir valores entre dos _goroutines_.

.image ./resources/images/channels.jpg 100 _

.image ./resources/images/concurrency-channels.png 300 _

* Challenge 3.1

.image ./resources/images/chalenge-accepted.jpg 150 _

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/challenge3/3.1][Instrucciones del challenge 3.1]]

* Programando una API REST - HTTP Router

- Para crear una API REST vamos a usar el paquete [[http://www.gorillatoolkit.org/pkg/mux][gorilla/mux]].
- _gorilla/mux_ implementa un router para asociar _requests_ con _handlers_ (funciones Golang).

Se instala con:

	$ go get -u github.com/gorilla/mux

* Programando una API REST - HTTP Router

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/18-rest-api][Ejercicio 18]]

.code ./resources/src/rest-api.go

* Programando una API REST - JSON Encoding

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/18-rest-api][Ejercicio 18]]

- Para trabajar JSON vamos a usar el paquete [[https://golang.org/pkg/encoding/json/][encoding/json]].
- Se utilizan las funciones *Marshal* y *Encode*.

* Programando una API REST - JSON Encoding

.play -edit -numbers ./resources/src/rest-api-json.go

* Challenge 3.2

.image ./resources/images/chalenge-accepted.jpg 150 _

Crear una API REST para una aplicacion de recordatorios (To-Do) que contenga todas las funciones [[https://en.wikipedia.org/wiki/Create,_read,_update_and_delete][CRUD]] para la siguiente entidad:

	ID     int
	Title  string
	IsDone bool

Hints:

- Los datos se pueden almacenar en un arreglo.
- La funcion *strconv.Atoi* del paquete *[[https://golang.org/pkg/strconv/][strconv]]* permite convertir un string a un integer.

* Trabajando con MongoDB

Official MongoDB Go driver
	
	$ go get -u go.mongodb.org/mongo-driver/mongo

* Trabajando con MongoDB

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/19-dbaccess][Ejercicio 19]]

* Challenge 3.3

.image ./resources/images/chalenge-accepted.jpg 150 _

Modificar la API Rest del challenge 4.1 para que pueda acceder a diferentes fuentes de datos (en memoria y MongoDB) usando el patron [[https://medium.com/@pererikbergman/repository-design-pattern-e28c0f3e4a30][Repository]].

Hints:

- Se pueden copiar las funciones necesarias para operar con MongoDB desde el [[https://github.com/rfinochi/golang-workshop-src/tree/master/19-dbaccess][Ejercicio 19]].