Go  Workshop - Dia 1
https://golang-workshop.io
Tags: golang

Rodolfo Finochietti
Chief Delivery Officer, Lagash
rodolfof@lagash.com
http://lagash.com
@rodolfof

* Most popular languages

.image ./resources/images/most_popular_languages.jpg 500 _
.caption [[https://insights.stackoverflow.com/survey/2018][Stack Overflow Developer Survey 2018]]

* Most popular (programming) languages

.image ./resources/images/most_popular_programming_languages.jpg 500 _
.caption [[https://insights.stackoverflow.com/survey/2018][Stack Overflow Developer Survey 2018]]

* Most loved languages

.image ./resources/images/most_loved_languages.jpg 500 _
.caption [[https://insights.stackoverflow.com/survey/2018][Stack Overflow Developer Survey 2018]]

* Por que otro lenguaje de programacion?

- Programar _software_ _de_ _sistema_ es dificil
	Las computadoras tiene muchos nucleos
- Hoy en dia un lenguaje de programacion es mas que solo un compilador
	Manejo de librerias y dependencias
	Velocidad para compilar
	Facilidad para programar
	Testing
- *Sin* *Friccion*
- *Autocontenido*
	... you can build a production binary on your Mac and ship it up to a Linux server 
	and just run it without any crazy installs or any worrying about dependency conflicts. 

	Brian Ketelsen, Microsoft. 

* Quienes

- Ken Thompson
	Bell Labs, Unix, Unix Shell, UTF-8
- Rob Pike
	Bell Labs, Unix, Plan 9, UTF-8
- Robert Griesemer
	Google V8, Java HotSpot

.image ./resources/images/authors.jpg 180 _
.caption [[https://www.youtube.com/watch?v=3yghHvvZQmA][Meet the authors]]

* Por que

	Programming had become too difficult and the choice of languages was partly to blame. 
	One had to choose either efficient compilation, efficient execution, or ease of programming; 
	all three were not available in the same mainstream language.

- Arranca como proyecto en 2007 dentro de Google. Goals: eliminar la *lentitud* y la *torpeza* a la hora de desarrollar software en Google.
- Anunciado al mundo en 2009, en 2012 se estabiliza la API con la version 1.0 . La version actual es la 1.12.x, siguiendo su promesa de [[https://golang.org/doc/go1compat][compatibilidad]].
- Es necesario que los desarrolladores puedan ser *productivos* *muy* *rapidamente* con lenguajes y herramientas _serias_.
- El lenguaje fue pensado por y para personas que escriben, leen y debuggean grandes piezas de software.

* Premisas

- Multi-plataforma
	No corre en una maquina virtual
- Estatico
- Type-safe / Memory-safe
- Garbage Collector
- Compilacion rapida

* Caracteristicas

- _Battery_ _included_
	Net / Http
	IO
	Concurrency
	Built in Web Server
	Built in Testing Framework
	Integracion con Git
- Imperativo y estructurado 
	Lineal, paso a paso
	Loops, conditionals
	Fuertemente tipado (pero con inferencia de tipos)
- *No* *orientado* *a* *objetos*
	Structs instead of classes 
	No Inheritance (mejor componer que heredar)
	No overloading (pero si polimorfismo)

* Caracteristicas

- Funciones son _first_ _class_ _citizens_
	Pueden ser pasadas como parametros
- Concurrency 
- Multiple return values

* Manos a la obra

.image ./resources/images/handy_manny.jpg 550 _

* Instalacion

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/01-installation][Ejercicio 1]]
.image ./resources/images/installation.png 450 _

* Hello World

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/02-hello-world][Ejercicio 2]]

.play -edit -numbers ./resources/src/hello-world.go

Comandos basicos desde consola

	go command [arguments]

	build     Compila paquetes y dependencias
	clean     Remueve archivos object     
	get       Descarga e instala paquetes y dependencias
	install   Compila e instala paquetes y dependencias
	run       Compila y corre paquetes y dependencias
	test      Testea paquetes
	fmt       Formatea el codigo
	...

* Variables

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/03-variables][Ejercicio 3]]

.play -edit -numbers ./resources/src/variables.go

* Tipos

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/04-types][Ejercicio 4]]

.play -edit -numbers ./resources/src/types.go

* Operadores

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/05-operators][Ejercicio 5]]

.play -edit -numbers ./resources/src/operators.go

* Funciones

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/06-functions][Ejercicio 6]]

.play -edit -numbers ./resources/src/functions.go

* Instrucciones de control - if

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/07-control-statments][Ejercicio 7]]

.play -edit -numbers ./resources/src/if.go

* Instrucciones de control - for

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/07-control-statments][Ejercicio 7]]

.play -edit -numbers ./resources/src/for-simple.go

* Instrucciones de control - for

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/07-control-statments][Ejercicio 7]]

.play -edit -numbers ./resources/src/for-simpleBreak.go

* Instrucciones de control - for

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/07-control-statments][Ejercicio 7]]

.play -edit -numbers ./resources/src/for-simpleContinue.go

* Instrucciones de control - for

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/07-control-statments][Ejercicio 7]]

.play -edit -numbers ./resources/src/for-printTower.go

* Instrucciones de control - switch

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/07-control-statments][Ejercicio 7]]

.play -edit -numbers ./resources/src/switch.go

* Review time

.image ./resources/images/review-time.png 500 _

* Packages

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/08-packages][Ejercicio 8]]

- Los directorios son llamados _packages_ en Golang
- Para importar paquetes se debe indicar el path al directorio que lo contiene

Estructura de directorios:

	bin (binarios creados con el comando go install)
	pkg (package archives, versiones compiladas de los paquetes)
	src (codigo fuente)

* Arreglos

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/09-arrays][Ejercicio 9]]

.play -edit -numbers ./resources/src/arrays.go

* Arreglos - Value Type

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/09-arrays][Ejercicio 9]]

.play -edit -numbers ./resources/src/arrays-value-type.go

* Arreglos - Slices

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/09-arrays][Ejercicio 9]]

.image ./resources/images/slices.jpg 400 _

* Arreglos - Slices

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/09-arrays][Ejercicio 9]]

.play -edit -numbers ./resources/src/arrays-slices.go

* Challenge  1.1

.image ./resources/images/chalenge-accepted.jpg 150 _

Crear una funcion _Reverse_ que devuelva un string pasado por parametro.

Hints:

- El tipo de dato [[https://yourbasic.org/golang/rune][rune]] es una representacion de un _code_ _point_ (valor numerico de un caracter en un codificacion determinada).
- _string_ se puede usar para convertir un _rune_ a un caracter, y viceversa.

	r := []rune(s)
	s := string(r)

* Challenge  1.2 (Opcional)

.image ./resources/images/chalenge-accepted.jpg 150 _

Modificar la funcion _Reverse_ para invertir el _casing_ de las vocales (solamente).

* Challenge  1.3

.image ./resources/images/chalenge-accepted.jpg 150 _

Crear un paquete _stringutil_ que contega la funcion _Reverse_ y se utilice en funcion la _main_.

* Archivos

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/10-files][Ejercicio 10]]

.code -edit -numbers ./resources/src/files.go

* Maps

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/11-maps][Ejercicio 11]]

.play -edit -numbers ./resources/src/maps.go

* Linea de commandos - Argumentos

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/12-cmdline][Ejercicio 12]]

.code -edit -numbers ./resources/src/cmdline-args.go

* Linea de commandos - Flags

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/12-cmdline][Ejercicio 12]]

.code -edit -numbers ./resources/src/cmdline-flags.go

* Linea de commandos - Variables de entorno

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/12-cmdline][Ejercicio 12]]

.code -edit -numbers ./resources/src/cmdline-env.go

* Challenge  1.4 (Opcional)

.image ./resources/images/chalenge-accepted.jpg 150 _

Cambiar el programa para que el parametro string de la funcion _Reverse_ se obtenga desde la linea de comandos con un flag llamado _text_.

* Testing

- Golang posee un framework de testing incluido en la standard library.
- Se encuentra en el paquete _testing_.
- Todo archivo Go con el sujifo *_test.go* es considerado un test suite en Golang.
- En cada test suite podemos correr:
	Tests
	Benchmarks
	Examples

* Testing

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/13-testing][Ejercicio 13]]

.code -edit -numbers ./resources/src/test.go

- Cada funcion TestXxxx en un test suite es un test.
- El comando *go* *test* corre los test del proyecto.

* Testing - Code Coverage

Se puede controlar el code coverage con el comando:

	go test -cover

Se pueden exportar los resultados y verlos en html con:

	go test -coverprofile=coverage.out
	go tool cover -html=coverage.out


* Testing - Benchmark

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/13-testing][Ejercicio 13]]

.code -edit -numbers ./resources/src/test-benchmark.go

- Cada funcion BenchmarkXxxx es un benchmark.
- Un Benchmark no es un test.
- Las funciones de benchmark son ejecutadas muchas veces por el framework de test.
- El valor *b.N* se incrementa hasta que el framework el test esta safisfecho d ela estabilidadl del benchmark.

* Testing - Benchmark

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/13-testing][Ejercicio 13]]

Un benchmark se ejecuta con el comando *go* *test* *-bench=.* (el parametro _bench_ es _regex_ para indicar cuales benchmarks queremos correr).

El resultado es:

	% go test -bench=.
	PASS
	BenchmarkFibonacci   5000000               509 ns/op
	ok      github.com/rfinochi/golang-workshop       3.084s

La segunda linea indica el valor final de *b.N* y el tiempo promedio de ejecucion en nanosegundos/operacion.

* Testing - Benchmark

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/13-testing][Ejercicio 13]]

.code -edit -numbers ./resources/src/test-benchmark-wrong.go

Un loop es un operacion crucial en un benchmark, *cuidado!*

* Testing - Example

.caption [[https://github.com/rfinochi/golang-workshop-src/tree/master/13-testing][Ejercicio 13]]

.code -edit -numbers ./resources/src/test-example.go

- Los _examples_ son snippets de codigo Golang que se muestran como parte de la documentacion.
- Estan verificados por que tambien se corren como tests. 
- Tambien se pueden ejecutar por el usuario al leer la documentacion web generada con la herramienta _godoc_ (el usuario dispone de un boton _Run_ _Test_).

* Challenge  1.5

.image ./resources/images/chalenge-accepted.jpg 150 _

Crear un _test_, un _benchmark_, y un _example_ para la funcion _Reverse_.